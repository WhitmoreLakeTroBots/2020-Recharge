// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.CommonLogic;
import frc.robot.Settings;
import frc.robot.hardware.wlSpark;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class subClimb extends Subsystem {

    public wlSpark climbMotor;
    private wlSpark climbMotorInv;
    private double joyDriveDeadband = 0.09;

    public subClimb() {
        climbMotor = new wlSpark(Settings.CANID_subClimbMotor, MotorType.kBrushless);
    }

    public void getEncoderCount() {
        climbMotor.getEncoder();
    }

    public void Climb(Joystick stick) {
        double joyY = CommonLogic.joyDeadBand(-stick.getY(), joyDriveDeadband);
        Climb((joyY), (-joyY));
    }

    /**
     * Accepting a percenage of the motor velocities for left and right sides of the
     * robot to allow command to steer the robot
     * 
     * @param leftRPM  -- percentage of max RPM for the motors
     * @param rightRPM -- percentage of max RPM for the motors
     */
    public void Climb(double powerLeft, double powerRight) {

        setPower_RightDrive(powerRight);
        setPower_LeftDrive(powerLeft);
    }

    private void setPower_LeftDrive(double pwrPercent) {
        double power = CommonLogic.CapMotorPower(pwrPercent * Settings.Chassis_powerLeftScaler, -1, 1);
        climbMotor.set(power);
    }

    private void setPower_RightDrive(double pwrPercent) {
        double power = CommonLogic.CapMotorPower(pwrPercent * Settings.Chassis_powerRightScaler, -1, 1);
        climbMotorInv.set(power);
    }

    @Override
    public void initDefaultCommand() {

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
