// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.command.Subsystem;
//import frc.robot.CommonLogic;
import frc.robot.Robot;
import frc.robot.Settings;
//import frc.robot.subsystems.subChassis;

/**
 *
 */
public class Auto_DriveByGyro extends Command {

  double inches = 0;
  double Revs = 0;
  double RPMS = 0;
  double RPM_tol = .01;
  double Revs_tol = .05;
  double targetHeading = 0.0;
  
  public Auto_DriveByGyro(double dist_inches, double velInches_sec, double heading_deg) {
    requires(Robot.subChassis);
    Revs = Robot.subChassis.inches2MotorRevs(dist_inches);
    RPMS = Robot.subChassis.inches_sec2RPM(velInches_sec);
    targetHeading = heading_deg;

  }

  // Called just before this Command runs the first time
  @Override
  protected void initialize() {

    System.err.println("Auto_DriveByGyro.initialize()");
    // start the motion
    Robot.subChassis.resetEncoder_LeftDrive();
    Robot.subChassis.resetEncoder_RightDrive();
    System.err.println("LPos = " + Robot.subChassis.getEncoderPosLeft());
    System.err.println("RPos = " + Robot.subChassis.getEncoderPosRight());
    
    Robot.subChassis.setSmartPosition_LeftDrive(-Revs, RPMS);
    Robot.subChassis.setSmartPosition_RightDrive(Revs, RPMS);

  }

  // Called repeatedly when this Command is scheduled to run
  @Override
  protected void execute() {

    System.err.println("CurrPos = " + Robot.subChassis.getEncoderPos_LR()+ " target=" + Revs);
    double curr_heading = Robot.subGyro.getNormaliziedNavxAngle();
    double delta = Robot.subGyro.deltaHeading(curr_heading, targetHeading);
    double gyroAdjust = Settings.chassisDriveStraightGyroKp * delta;
    // Robot.subChassis.smartPosition_steerStraight(RPMS + gyroAdjust, RPMS -
    // gyroAdjust, RPM_tol);

  }

  // Make this return true when this Command no longer needs to run execute()
  @Override
  protected boolean isFinished() {
    //System.err.println("Auto_DriveByGyro.isFinished()");

    boolean bDone = Robot.subChassis.smartPosition_LR_isDone(Revs, Revs_tol); 
    if (bDone) {
      Robot.subChassis.stop();
    }
    return bDone;
  }

  // Called once after isFinished returns true
  @Override
  protected void end() {
    Robot.subChassis.stop();
  }

  // Called when another command which requires one or more of the same
  // subsystems is scheduled to run
  @Override
  protected void interrupted() {
  }
}
