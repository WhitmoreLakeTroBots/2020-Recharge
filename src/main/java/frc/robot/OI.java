// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import frc.robot.commands.cmdCancelFlyWheel;
import frc.robot.commands.cmdLauncher;
import frc.robot.commands.cmdTurnByLimeLight;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joyStickDrive;
    private Joystick joyStickArt1;
    private Joystick joyStickArt2;
    private JoystickButton limeFollow;
    private JoystickButton flywheelButton;
    private JoystickButton cancelFLyWheel;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joyStickArt2 = new Joystick(2);
        joyStickArt1 = new Joystick(1);
        joyStickDrive = new Joystick(0);
        limeFollow = new JoystickButton(joyStickDrive, 3);
        flywheelButton = new JoystickButton(joyStickDrive, 6);
        cancelFLyWheel = new JoystickButton(joyStickDrive, 7);
       
        limeFollow.whenPressed(new cmdTurnByLimeLight());
        flywheelButton.whenPressed(new cmdLauncher());
        cancelFLyWheel.whenReleased(new cmdCancelFlyWheel());
        


        // SmartDashboard Buttons
        //SmartDashboard.putData("Autonomous Command", new Auto_DriveByGyro(120,44,0));
        //SmartDashboard.putData("doEverything", new doEverything());
        //SmartDashboard.putData("Command Group 1", new CommandGroup1());
        //SmartDashboard.putData("cmdDelay", new cmdDelay());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick joyDrive() {
        return joyStickDrive;
    }

    public Joystick joyArt1() {
        return joyStickArt1;
    }

    public Joystick joyArt2() {
        return joyStickArt2;
    }

}

