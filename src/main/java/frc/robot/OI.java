// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import frc.robot.commands.cmdActuatorControl;
import frc.robot.commands.cmdCancelFlyWheel;
import frc.robot.commands.cmdExtendClimb;
import frc.robot.commands.cmdGroupExtendClimb;
import frc.robot.commands.cmdGroupHopperOuttake;
import frc.robot.commands.cmdHopperCarry;
import frc.robot.commands.cmdHopperFeeder;
import frc.robot.commands.cmdHopperHome;
import frc.robot.commands.cmdHopperIntake;
import frc.robot.commands.cmdHopperIntakeMotor;
import frc.robot.commands.cmdHopperLauncher;
import frc.robot.commands.cmdHopperOuttakeMotor;
import frc.robot.commands.cmdIntake;
import frc.robot.commands.cmdIntakeRev;
import frc.robot.commands.cmdLauncher;
import frc.robot.commands.cmdLockClimb;
import frc.robot.commands.cmdTurnByLimeLight;
import frc.robot.commands.swapabletestcmd;
import frc.robot.commands.cmdLimeLightPipeline;
import frc.robot.commands.cmdLauncherFaster;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joyDrive;
    private Joystick joyArt;
    public Joystick joyStickArt2;
    private JoystickButton limeFollow;
    private JoystickButton flywheelButton;
    private JoystickButton cancelFLyWheel;
    private JoystickButton intake;
    private JoystickButton hopperIntakeMotor;
    private JoystickButton hopperOutakeMotor;
    private JoystickButton outtake;
    private JoystickButton encoderHopper;
    private JoystickButton hopperHome;
    private JoystickButton hopperIntake;
    private JoystickButton hopperCarry;
    private JoystickButton hopperDump;
    private JoystickButton hopperLauncher;
    private JoystickButton extendclimb;
    private JoystickButton lockClimb;
    private JoystickButton hopperFeeder;
    private JoystickButton limelightCamMode;
    private JoystickButton actuatorMotor;
    private JoystickButton fasterShooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joyStickArt2 = new Joystick(2);
        joyArt = new Joystick(1);
        joyDrive = new Joystick(0);
        limeFollow = new JoystickButton(joyDrive, 3);
        flywheelButton = new JoystickButton(joyDrive, 11);
        fasterShooter = new JoystickButton(joyDrive, 10);
        cancelFLyWheel = new JoystickButton(joyDrive, 12);
        limelightCamMode = new JoystickButton(joyDrive, 5);
        
        intake = new JoystickButton(joyDrive, 2);//outtake
        outtake = new JoystickButton(joyDrive, 1);//intake
        hopperIntakeMotor = new JoystickButton(joyArt, 1);
        hopperOutakeMotor = new JoystickButton(joyArt, 2);
        encoderHopper = new JoystickButton(joyDrive, 9);
        
        hopperHome = new JoystickButton(joyArt, 7);
        hopperCarry = new JoystickButton(joyArt, 3);
        hopperIntake = new JoystickButton(joyArt, 5);
        hopperDump = new JoystickButton(joyArt, 6);
        hopperLauncher = new JoystickButton(joyArt, 4);
        extendclimb = new JoystickButton(joyStickArt2, 3);
        lockClimb = new JoystickButton(joyStickArt2, 4);
        hopperFeeder = new JoystickButton(joyArt, 8);
        actuatorMotor = new JoystickButton(joyArt, 10);

        limeFollow.whenPressed(new cmdTurnByLimeLight());
        flywheelButton.whenPressed(new cmdLauncher());
        fasterShooter.whenPressed(new cmdLauncherFaster());
        cancelFLyWheel.whenReleased(new cmdCancelFlyWheel());
        intake.whileHeld(new cmdIntake());
        outtake.whileHeld(new cmdIntakeRev());
        encoderHopper.whenPressed(new swapabletestcmd());
        hopperDump.whenPressed(new cmdGroupHopperOuttake());
        hopperIntake.whenPressed(new cmdHopperIntake());
        hopperCarry.whenPressed(new cmdHopperCarry());
        hopperHome.whenPressed(new cmdHopperHome());
        hopperLauncher.whenPressed(new cmdHopperLauncher());
        hopperIntakeMotor.whileHeld(new cmdHopperIntakeMotor());
        hopperOutakeMotor.whileHeld(new cmdHopperOuttakeMotor());
        extendclimb.whenPressed(new cmdGroupExtendClimb());
        lockClimb.whenPressed(new cmdLockClimb());
        hopperFeeder.whenPressed(new cmdHopperFeeder());
        limelightCamMode.whileHeld(new cmdLimeLightPipeline());
        actuatorMotor.whileHeld(new cmdActuatorControl());
        // SmartDashboard Buttons
        // SmartDashboard.putData("Autonomous Command", new Auto_DriveByGyro(120,44,0));
        // SmartDashboard.putData("doEverything", new doEverything());
        // SmartDashboard.putData("Command Group 1", new CommandGroup1());
        // SmartDashboard.putData("cmdDelay", new cmdDelay());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick joyDrive() {
        return joyDrive;
    }

    public Joystick joyArt1() {
        return joyArt;
    }

    public Joystick joyArt2() {
        return joyStickArt2;
    }

}
